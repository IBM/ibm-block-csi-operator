name: Operator Build
on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master
jobs:
  Prepare_env:
   name: "Prepare env"
   runs-on: ubuntu-latest
   steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Setup dependencies
        id: setup_dependencies
        run: |
          build/ci/github_actions/setup_ci_dependencies.sh
        env:
          build_number: "${{ github.run_number }}"
      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('dev-requirements.txt') }}
      - name: Save dependencies files
        uses: actions/upload-artifact@v2
        with:
          name: ci-dependencies
          path: |
            /home/runner/.bash_profile
          retention-days: 1
   outputs:
     image_branch_tag: "${{ steps.setup_dependencies.outputs.image_branch_tag }}"
     operator_specific_tag_for_test: "${{ steps.setup_dependencies.outputs.operator_specific_tag_for_test }}"

  Unit_testing:
    runs-on: ubuntu-latest
    name: "Unit testing"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run unit tests
        run: |
          mkdir -p build/_output/reports && chmod 777 build/_output/reports
          ./build/ci/run_unittests.sh

  Run_OLM_validation:
    runs-on: ubuntu-latest
    name: "Run OLM validation"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Run OLM validation
        run: |
          ./build/ci/run_olm_validation.sh
          
  CSI_Build_and_push_images:
    name: "CSI Build and push images"
    runs-on: ubuntu-latest
    needs:
      - Unit_testing
      - Run_OLM_validation
      - Prepare_env
    strategy:
      matrix:
        image_type: ['nodeagent', 'operator']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: 'csiblock1'
          password: '${{ secrets.CSIBLOCK_DOCKERHUB_PASSWORD }}'
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-${{ matrix.image_type }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and push ${{ matrix.image_type }}
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/ppc64le,linux/s390x
          push: true
          tags: |
            csiblock1/ibm-block-csi-${{ matrix.image_type }}:${{ needs.Prepare_env.outputs.operator_specific_tag_for_test }}
            csiblock1/ibm-block-csi-${{ matrix.image_type }}:${{ needs.Prepare_env.outputs.image_branch_tag }}
            csiblock1/ibm-block-csi-${{ matrix.image_type }}:latest
          file: build/Dockerfile.${{ matrix.image_type }}
          cache-from: type=local,src=/tmp/.buildx-${{ matrix.image_type }}
          cache-to: type=local,dest=/tmp/.buildx-new-${{ matrix.image_type }}
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          [[ -G /tmp/.buildx-${{ matrix.image_type }} ]] && rm -rf /tmp/.buildx-${{ matrix.image_type }}
          mv /tmp/.buildx-new-${{ matrix.image_type }} /tmp/.buildx-${{ matrix.image_type }}
    outputs:
      operator_specific_tag_for_test: "${{ needs.Prepare_env.outputs.operator_specific_tag_for_test }}"

  Create_cluster:
    runs-on: ubuntu-latest
    name: "Create cluster"
    needs: CSI_Build_and_push_images
    env:
      csiblock_dockerhub_password: ${{ secrets.CSIBLOCK_DOCKERHUB_PASSWORD }}
      controller_repository_for_test: csiblock1/ibm-block-csi-controller
      node_repository_for_test: csiblock1/ibm-block-csi-node
      operator_image_repository_for_test: csiblock1/ibm-block-csi-operator
      operator_specific_tag_for_test: "${{ needs.CSI_Build_and_push_images.outputs.operator_specific_tag_for_test }}"
      operator_image_for_test: "csiblock1/ibm-block-csi-operator:${{ needs.CSI_Build_and_push_images.outputs.operator_specific_tag_for_test }}"
    timeout-minutes: 7
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Retrieve ci dependencies
        uses: actions/download-artifact@v2
        with:
          name: ci-dependencies
          path: /home/runner
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('dev-requirements.txt') }}
      - name: Get driver branch
        id: driver_branch
        run: |
          build/ci/github_actions/operator/get_driver_branch_tag.sh
        env:
          github_token: ${{ secrets.CSIBLOCK_GITHUB_TOKEN }}
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.1.0
        with:
          version: v0.11.1
      - name: Wait for k8s cluster to be ready
        run: |
          build/ci/github_actions/operator/wait_for_k8s_ready.sh
      - name: Deploy ibm block csi driver
        run: |
          build/ci/github_actions/operator/deploy_driver.sh
        env:
          driver_images_tag: "${{ steps.driver_branch.outputs.image_branch_tag }}"
          operator_yaml: "deploy/installer/generated/ibm-block-csi-operator.yaml"
          cr_file: "deploy/crds/csi.ibm.com_v1_ibmblockcsi_cr.yaml"
      - name: Wait for csi ibm block driver to be ready
        run: |
          build/ci/github_actions/operator/wait_for_driver_ready.sh
        env:
          driver_images_tag: "${{ steps.driver_branch.outputs.image_branch_tag }}"
      - name: Save driver pods logs to artifacts
        if: always()
        run: |
          build/ci/github_actions/operator/save_driver_logs_to_artifacts.sh
      - name: Upload driver pods logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Driver logs
          path: |
            /tmp/*.txt
          retention-days: 7
