// +build !ignore_autogenerated

/**
 * Copyright 2019 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.Config":                    schema_pkg_apis_csi_v1_Config(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.ConfigSpec":                schema_pkg_apis_csi_v1_ConfigSpec(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.ConfigStatus":              schema_pkg_apis_csi_v1_ConfigStatus(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSI":               schema_pkg_apis_csi_v1_IBMBlockCSI(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSIControllerSpec": schema_pkg_apis_csi_v1_IBMBlockCSIControllerSpec(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSINodeSpec":       schema_pkg_apis_csi_v1_IBMBlockCSINodeSpec(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSISpec":           schema_pkg_apis_csi_v1_IBMBlockCSISpec(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSIStatus":         schema_pkg_apis_csi_v1_IBMBlockCSIStatus(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeAgentSpec":             schema_pkg_apis_csi_v1_NodeAgentSpec(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeAgentStatus":           schema_pkg_apis_csi_v1_NodeAgentStatus(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfo":                  schema_pkg_apis_csi_v1_NodeInfo(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfoSpec":              schema_pkg_apis_csi_v1_NodeInfoSpec(ref),
		"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfoStatus":            schema_pkg_apis_csi_v1_NodeInfoStatus(ref),
	}
}

func schema_pkg_apis_csi_v1_Config(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Config is the Schema for the configs API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.ConfigSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.ConfigStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.ConfigSpec", "github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.ConfigStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_csi_v1_ConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigSpec defines the desired state of Config",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"defineHost": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"nodeAgent": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeAgentSpec"),
						},
					},
				},
				Required: []string{"defineHost", "nodeAgent"},
			},
		},
		Dependencies: []string{
			"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeAgentSpec"},
	}
}

func schema_pkg_apis_csi_v1_ConfigStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigStatus defines the observed state of Config",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"nodeAgent": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the driver running phase",
							Ref:         ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeAgentStatus"),
						},
					},
				},
				Required: []string{"nodeAgent"},
			},
		},
		Dependencies: []string{
			"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeAgentStatus"},
	}
}

func schema_pkg_apis_csi_v1_IBMBlockCSI(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IBMBlockCSI is the Schema for the ibmblockcsis API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSISpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSIStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSISpec", "github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSIStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_csi_v1_IBMBlockCSIControllerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IBMBlockCSIControllerSpec defines the desired state of IBMBlockCSIController",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "The repository of the controller image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "The tag of the controller image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"repository", "tag"},
			},
		},
	}
}

func schema_pkg_apis_csi_v1_IBMBlockCSINodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IBMBlockCSINodeSpec defines the desired state of IBMBlockCSINode",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "The repository of the node image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "The tag of the node image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"repository", "tag"},
			},
		},
	}
}

func schema_pkg_apis_csi_v1_IBMBlockCSISpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IBMBlockCSISpec defines the desired state of IBMBlockCSI",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"controller": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSIControllerSpec"),
						},
					},
					"node": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSINodeSpec"),
						},
					},
				},
				Required: []string{"controller", "node"},
			},
		},
		Dependencies: []string{
			"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSIControllerSpec", "github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.IBMBlockCSINodeSpec"},
	}
}

func schema_pkg_apis_csi_v1_IBMBlockCSIStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "IBMBlockCSIStatus defines the observed state of IBMBlockCSI",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the driver running phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"controllerReady": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"nodeReady": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the current driver version",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"phase", "controllerReady", "nodeReady", "version"},
			},
		},
	}
}

func schema_pkg_apis_csi_v1_NodeAgentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeAgentSpec defines the desired state of NodeAgent",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"repository": {
						SchemaProps: spec.SchemaProps{
							Description: "The repository of the node agent image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "The tag of the node agent image",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "The port of the node agent server",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"repository", "tag", "port"},
			},
		},
	}
}

func schema_pkg_apis_csi_v1_NodeAgentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeAgentStatus defines the current state of NodeAgent",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phase": {
						SchemaProps: spec.SchemaProps{
							Description: "Phase is the NodeAgent running phase",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"phase"},
			},
		},
	}
}

func schema_pkg_apis_csi_v1_NodeInfo(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeInfo is the Schema for the nodeinfos API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfoSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfoStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfoSpec", "github.com/IBM/ibm-block-csi-operator/pkg/apis/csi/v1.NodeInfoStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_csi_v1_NodeInfoSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeInfoSpec defines the desired state of NodeInfo",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_csi_v1_NodeInfoStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeInfoStatus defines the observed state of NodeInfo",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"iqns": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"wwpns": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"definedOnStorages": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"iqns", "wwpns", "definedOnStorages"},
			},
		},
	}
}
