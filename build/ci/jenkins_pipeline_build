pipeline {
    environment {
        registryCredential = 'csi_w3_user'
        artifactory_path = 'build/_output/reports/images_url'
        registry_protocol = 'https'
        Dockerfile_operator = 'build/Dockerfile.operator'
        Dockerfile_node = 'build/Dockerfile.nodeagent'
        NODE_IMAGE = 'ibm-node-agent'
    }
    agent {
        label "${env.AGENT_LABEL}"
    }
    stages {
        stage ('Run unit tests') {
            steps {
                sh 'mkdir -p build/_output/reports && chmod 777 build/_output/reports'
                sh './build/ci/run_unittests.sh'
            }
        }
        stage ('Run OLM verifications') {
            steps {
                sh './build/ci/run_olm_verification.sh'
            }
        }
        stage ('Build docker images') {
            steps {
                script {
                    branch = sh(script:"echo $GIT_BRANCH | sed 's|/|.|g'",returnStdout:true).trim()
                    specific_tag = "${IMAGE_VERSION}_b${BUILD_NUMBER}_${branch}"
                    if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'origin/develop' || GIT_BRANCH == 'master') {
                        operator_image_latest = docker.build("${OPERATOR_IMAGE}", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f ${Dockerfile_operator} .")
                        node_image_latest = docker.build("${DOCKER_REGISTRY}/${NODE_IMAGE}", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f ${Dockerfile_node} .")
                    }
                    operator_image_with_generated_tag = docker.build("${DOCKER_REGISTRY}/${OPERATOR_IMAGE}:$specific_tag", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f ${Dockerfile_operator} .")
                    node_image_with_generated_tag = docker.build("${DOCKER_REGISTRY}/${NODE_IMAGE}:$specific_tag", "--build-arg VERSION=${IMAGE_VERSION} --build-arg BUILD_NUMBER=${BUILD_NUMBER} -f ${Dockerfile_node} .")
                }
            }
        }
        stage ('push docker images') {
            steps {
                script {
                    registryUrl = "${registry_protocol}://${DOCKER_REGISTRY}"
                    if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'origin/develop' || GIT_BRANCH == 'master') {
                        docker.withRegistry(registryUrl, registryCredential ) {
                            operator_image_latest.push()
                            operator_image_with_generated_tag.push()
                            node_image_latest.push()
                            node_image_with_generated_tag.push()
                        }
                    } else {
                        docker.withRegistry(registryUrl, registryCredential ) {
                            operator_image_with_generated_tag.push()
                            node_image_with_generated_tag.push()
                        }
                    }
                }
            }
        }
        stage ('Save Artifactes') {
            steps {
                script {
                    sh 'dirname ${artifactory_path} | xargs mkdir -p'
                    if (GIT_BRANCH == 'develop' || GIT_BRANCH == 'origin/develop' || GIT_BRANCH == 'master') {
                        sh "echo ${DOCKER_REGISTRY}/${OPERATOR_IMAGE}:$specific_tag > ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${NODE_IMAGE}:$specific_tag >> ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${OPERATOR_IMAGE}:latest >> ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${NODE_IMAGE}:latest >> ${artifactory_path}"
                    } else {
                        sh "echo ${DOCKER_REGISTRY}/${OPERATOR_IMAGE}:$specific_tag > ${artifactory_path}"
                        sh "echo ${DOCKER_REGISTRY}/${NODE_IMAGE}:$specific_tag >> ${artifactory_path}"
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'ls -la build/_output/reports/'
            // junit 'build/reports/*.xml'
            archiveArtifacts 'build/_output/reports/images_url'
            sh '[ -d build/_output/reports ] && rm -rf build/_output/reports'
            script {
                manager.addShortText("${env.GIT_BRANCH}")
            }
        }

        failure {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}',
                    to: "${env.EMAIL_TO}",
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        unstable {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}',
                    to: "${env.EMAIL_TO}",
                    subject: 'Unstable build in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        changed {
            emailext body: 'Check console output at $BUILD_URL to view the results.',
                    to: "${env.EMAIL_TO}",
                    subject: 'Jenkins build is back to normal: $PROJECT_NAME - #$BUILD_NUMBER'
        }

    }
}
